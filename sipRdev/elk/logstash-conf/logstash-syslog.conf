input {
  tcp {
    port => 9999
    type => syslog
  }
  udp {
    port => 9999
    type => syslog
  }
  tcp {
    port => 9998
    type => rtcpxr
  }
  udp {
    port => 9998
    type => rtcpxr
  }
}

filter {
  mutate {
    gsub => [
      "message", "\\r\\n", " ",
      "message", "\\r", " ",
      "message", "\\n", " "
    ]
  }
  if [type] == "syslog" {
    grok {
      match => { "message" => "{\"@timestamp\":\"%{DATA}\",\"message\":\"<message from=\\\"%{IP:from_ip}:%{INT:from_port}\\\"  to=\\\"%{IP:to_ip}:%{INT:to_port}\\\"  time=\\\"%{NUMBER:epoch}\\\" isSender=\\\"%{WORD:sender}\\\"  transactionId=\\\"%{DATA:transaction_id}\\\"  callId=\\\"%{DATA:call_id}\\\"  firstLine=\\\"%{DATA:first_line}\\\"  > <%{DATA:sip_message}> </message> \",\"logger_name\":\"%{WORD:logger}\",\"thread_name\":\"%{DATA:thread}\",\"level\":\"%{WORD:level}\",\"level_value\":%{NUMBER:level_value},\"HOSTNAME\":\"%{DATA:server}\"}" }
    }
    mutate { remove_field  => ["message", "epoch", "logger", "level", "level_value"] }
  }
  if [type] == "rtcpxr" {
    grok {
      match => { "message" => "{\"@timestamp\":\"%{DATA}\",\"message\":\"VQIntervalReport LocalMetrics: TimeStamps:%{DATA:TimeStamps} SessionDesc:%{DATA:SessionDesc} CallID:%{DATA:CallID} ToID:%{DATA:ToID} FromID:%{DATA:FromID} LocalAddr:%{DATA:LocalAddr} RemoteAddr:%{DATA:RemoteAddr} JitterBuffer:%{DATA:JitterBuffer} PacketLoss:%{DATA:PacketLoss} BurstGapLoss:%{DATA:BurstGapLoss} Delay:%{DATA:Delay} Signal:%{DATA:Signal} QualityEst:%{DATA:QualityEst} DialogID:%{DATA:DialogID}\",\"logger_name\":\"%{DATA}\",\"thread_name\":\"%{DATA}\",\"level\":\"%{DATA}\"}" }
    }
    mutate { remove_field  => ["message"] }
  }
}

output {
  if "_grokparsefailure" not in [tags] {
    elasticsearch { hosts => ["sipRelastic:9200"] }
  }
}