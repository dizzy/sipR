input {
  tcp {
    port => 9999
    type => syslog
  }
  udp {
    port => 9999
    type => syslog
  }
  tcp {
    port => 9998
    codec => "json"
    type => rtcpxr
  }
  udp {
    port => 9998
    codec => "json"
    type => rtcpxr
  }
}

filter {
  if [type] == "syslog" {
    mutate {
      gsub => [
        "message", "\\r\\n", " ",
        "message", "\\r", " ",
        "message", "\\n", " "
      ]
    }
    grok {
      match => { "message" => "{\"@timestamp\":\"%{DATA}\",\"message\":\"<message from=\\\"%{IP:from_ip}:%{INT:from_port}\\\"  to=\\\"%{IP:to_ip}:%{INT:to_port}\\\"  time=\\\"%{NUMBER:epoch}\\\" isSender=\\\"%{WORD:sender}\\\"  transactionId=\\\"%{DATA:transaction_id}\\\"  callId=\\\"%{DATA:call_id}\\\"  firstLine=\\\"%{DATA:first_line}\\\"  > <%{DATA:sip_message}> </message> \",\"logger_name\":\"%{WORD:logger}\",\"thread_name\":\"%{DATA:thread}\",\"level\":\"%{WORD:level}\",\"level_value\":%{NUMBER:level_value},\"HOSTNAME\":\"%{DATA:server}\"}" }
    }
    mutate { remove_field  => ["message", "epoch", "logger", "level", "level_value"] }
  }
  if [type] == "rtcpxr" {
    kv {
      field_split => ","
      value_split => ":"
      exclude_keys => [ "Metrics", "LocalMetrics" ]
    }
    mutate { remove_field  => ["message"] }
  }
}

output {
  if "_grokparsefailure" not in [tags] {
    elasticsearch { hosts => ["sipRelastic:9200"] }
  }
}